"""Add provider field to user_sessions table

Revision ID: 3120f5bf60a4
Revises: 0a9c5469abc6
Create Date: 2025-07-28 09:51:48.726581

"""

import sqlalchemy as sa
from alembic import op
from enum import Enum
from migrations.migration_utils import (
    table_exists, column_exists, safe_add_column, safe_drop_column, safe_execute,
    get_dialect, get_enum_column, add_enum_check_constraint, drop_enum_check_constraint
)


class AuthProvider(Enum):
    """Authentication provider types for migration"""
    LOCAL = "LOCAL"
    OIDC = "OIDC"
    LDAP = "LDAP"

# revision identifiers, used by Alembic.
revision = "3120f5bf60a4"
down_revision = "0a9c5469abc6"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if user_sessions table exists
    if not table_exists("user_sessions"):
        print("WARNING: Table 'user_sessions' does not exist. Skipping provider column addition.")
        return
    
    # Check if provider column already exists
    if column_exists("user_sessions", "provider"):
        print("Column 'provider' already exists in 'user_sessions' table. Skipping addition.")
        # Ensure existing rows have a default value
        safe_execute(
            "UPDATE user_sessions SET provider = 'LOCAL' WHERE provider IS NULL",
            "Update existing provider values to LOCAL"
        )
        return
    
    # Create database-appropriate column for enum
    provider_column = get_enum_column(AuthProvider, "provider", nullable=True, default=AuthProvider.LOCAL)
    
    if safe_add_column("user_sessions", "provider", provider_column, schema=None):
        # Add CHECK constraint for MySQL/SQLite (PostgreSQL uses native enum)
        add_enum_check_constraint("user_sessions", "provider", AuthProvider)
        
        # Update existing rows to have 'LOCAL' as default provider
        safe_execute(
            "UPDATE user_sessions SET provider = 'LOCAL' WHERE provider IS NULL",
            "Set default provider values"
        )
        
        # Now make the column NOT NULL
        with op.batch_alter_table("user_sessions", schema=None) as batch_op:
            batch_op.alter_column("provider", nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop CHECK constraint for MySQL/SQLite before dropping column
    drop_enum_check_constraint("user_sessions", "provider")
    
    safe_drop_column("user_sessions", "provider", schema=None)

    # ### end Alembic commands ###
