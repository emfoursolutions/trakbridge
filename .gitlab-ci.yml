# =============================================================================
# .gitlab-ci.yml - Homelab Best Practices Configuration
# =============================================================================

# Pipeline configuration for TrakBridge application
# Using security-first, rootless container building with Buildah

stages:
  - validate
  - test
  - security
  - build
  - deploy

# Global variables
variables:
  # Python configuration
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  PYTHON_VERSION: "3.10"

  # Application configuration
  APP_NAME: "trakbridge"

  # Container registry configuration
  REGISTRY: "docker.io"
  IMAGE_NAME: "$REGISTRY/$DOCKERHUB_USERNAME/$APP_NAME"

  # Test configuration
  PYTEST_ADDOPTS: "--strict-markers --strict-config --tb=short"
  COVERAGE_FILE: "$CI_PROJECT_DIR/.coverage"

  # Security scanning
  SAST_EXCLUDED_PATHS: "tests, docs, scripts"
  SECURE_LOG_LEVEL: "debug"

# Cache configuration
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .pip-cache/
    - .coverage
    - .pytest_cache/

# =============================================================================
# VALIDATE STAGE
# =============================================================================

validate-yaml:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  script:
    - pip install pyyaml
    - python -c "import yaml; yaml.safe_load(open('config/settings/app.yaml'))"
    - python -c "import yaml; yaml.safe_load(open('config/settings/database.yaml'))"
    - python -c "import yaml; yaml.safe_load(open('config/settings/logging.yaml'))"
    - python -c "import yaml; yaml.safe_load(open('config/settings/threading.yaml'))"
    - python -c "import yaml; yaml.safe_load(open('config/settings/cot_types.yaml'))"
    - echo "✅ All YAML configuration files are valid"
  rules:
    - changes:
        - "config/**/*.yaml"
        - "config/**/*.yml"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

validate-requirements:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  script:
    - pip install pip-tools
    - pip-compile --check-only requirements.txt
    - echo "✅ Requirements are up to date"
  rules:
    - changes:
        - "requirements.txt"
        - "pyproject.toml"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# =============================================================================
# SECURITY STAGE
# =============================================================================

security-bandit:
  stage: security
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - security
    - docker
  before_script:
    - pip install bandit
  script:
    - echo "Running security scan with Bandit..."
    - bandit -r app.py services/ plugins/ routes/ models/ config/ -f json -o bandit-report.json || true
    - echo "✅ Security scan completed"
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

security-safety:
  stage: security
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - security
    - docker
  before_script:
    - pip install safety
  script:
    - echo "Checking for known security vulnerabilities..."
    - safety scan --key $SAFETY_API_KEY --output json > safety-report.json || true
    - echo "✅ Security vulnerability check completed"
  artifacts:
    reports:
      sast: safety-report.json
    paths:
      - safety-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# =============================================================================
# CODE QUALITY STAGE
# =============================================================================

lint-black:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  before_script:
    - pip install black
  script:
    - echo "Running Black code formatter check..."
    - black --check .
    - echo "✅ Black formatting check passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

lint-flake8:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  before_script:
    - pip install flake8
  script:
    - echo "Running Flake8 linting..."
    - flake8 services/ plugins/ models/ --max-line-length=100 --extend-ignore=E203,W503
    - echo "✅ Flake8 linting passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# =============================================================================
# BUILD STAGE - Using Buildah (Best Practice)
# =============================================================================

build-image:
  stage: build
  image: quay.io/buildah/stable:latest
  tags:
    - homelab
    - build
    - buildah
  before_script:
    - echo "Authenticating with container registry..."
    - echo "${DOCKERHUB_TOKEN}" | buildah login --username "${DOCKERHUB_USERNAME}" --password-stdin "${REGISTRY}"
  script:
    - echo "Building container image with Buildah..."
    - |
      # Build with proper labels and metadata
      buildah build \
        --tag "$IMAGE_NAME:$CI_COMMIT_SHA" \
        --tag "$IMAGE_NAME:latest" \
        --label "org.opencontainers.image.source=$CI_PROJECT_URL" \
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
        --label "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME" \
        --label "org.opencontainers.image.title=$APP_NAME" \
        --file Dockerfile \
        .
    - echo "Pushing images to registry..."
    - buildah push "$IMAGE_NAME:$CI_COMMIT_SHA"
    - buildah push "$IMAGE_NAME:latest"
    - echo "✅ Container build and push completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

build-tagged-image:
  stage: build
  image: quay.io/buildah/stable:latest
  tags:
    - homelab
    - build
    - buildah
  before_script:
    - echo "Authenticating with container registry..."
    - echo "${DOCKERHUB_TOKEN}" | buildah login --username "${DOCKERHUB_USERNAME}" --password-stdin "${REGISTRY}"
  script:
    - echo "Building tagged container image with Buildah..."
    - |
      # Build with proper labels and metadata
      buildah build \
        --tag "$IMAGE_NAME:$CI_COMMIT_TAG" \
        --label "org.opencontainers.image.source=$CI_PROJECT_URL" \
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
        --label "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        --label "org.opencontainers.image.version=$CI_COMMIT_TAG" \
        --label "org.opencontainers.image.title=$APP_NAME" \
        --file Dockerfile \
        .
    - echo "Pushing tagged image to registry..."
    - buildah push "$IMAGE_NAME:$CI_COMMIT_TAG"
    - echo "✅ Tagged container build and push completed"
  rules:
    - if: $CI_COMMIT_TAG


# =============================================================================
# DEPLOY STAGE
# =============================================================================

deploy-staging:
  stage: deploy
  image: alpine:latest
  tags:
    - homelab
    - deploy
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Image:$IMAGE_NAME:$CI_COMMIT_SHA"
    - echo "Staging deployment would happen here"
    - echo "✅ Staging deployment completed"
  environment:
    name: staging
    url: https://staging.trakbridge.homelab.local
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

deploy-production:
  stage: deploy
  image: alpine:latest
  tags:
    - homelab
    - deploy
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Image:$IMAGE_NAME:$CI_COMMIT_TAG"
    - echo "Production deployment would happen here"
    - echo "✅ Production deployment completed"
  environment:
    name: production
    url: https://trakbridge.homelab.local
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# =============================================================================
# NOTIFICATION STAGE
# =============================================================================

notify-success:
  stage: .post
  image: alpine:latest
  tags:
    - homelab
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Pipeline completed successfully!"
    - echo "Built and pushed:$IMAGE_NAME:$CI_COMMIT_SHA"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  when: on_success

notify-failure:
  stage: .post
  image: alpine:latest
  tags:
    - homelab
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Pipeline failed!"
    - echo "Check the logs for details"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  when: on_failure