# =============================================================================
# .gitlab-ci.yml - Optimized Performance Configuration
# =============================================================================

stages:
  - validate
  - test
  - security
  - build
  - deploy

# Global variables - OPTIMIZED
variables:
  # Git configuration - OPTIMIZED FOR SPEED
  GIT_DEPTH: 50  # Reduced from 0 - only get recent commits
  GIT_STRATEGY: fetch  # Faster than clone
  GIT_SUBMODULE_STRATEGY: none  # Skip submodules unless needed

  # Python configuration
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  PYTHON_VERSION: "3.12"

  # Build optimization
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_CACHE_DIR: "false"  # Enable caching

  # Application configuration
  APP_NAME: "trakbridge"

  # Container registry configuration
  REGISTRY: "docker.io"
  IMAGE_NAME: "$REGISTRY/$DOCKERHUB_USERNAME/$APP_NAME"

  # Test configuration
  PYTEST_ADDOPTS: "--strict-markers --strict-config --tb=short -n auto"  # Parallel tests
  COVERAGE_FILE: "$CI_PROJECT_DIR/.coverage"

  # Security scanning
  SAST_EXCLUDED_PATHS: "tests, docs, scripts"
  SECURE_LOG_LEVEL: "info"  # Reduced from debug

# Enhanced cache configuration
cache:
  - key: "pip-$CI_COMMIT_REF_SLUG"
    paths:
      - .pip-cache/
  - key: "python-$CI_COMMIT_REF_SLUG"
    paths:
      - .venv/
  - key: "buildah-$CI_COMMIT_REF_SLUG"
    paths:
      - buildah-cache/

# =============================================================================
# VALIDATE STAGE - OPTIMIZED
# =============================================================================

validate-yaml:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  timeout: 5m  # Set specific timeout
  before_script:
    - pip install --no-cache-dir pyyaml
  script:
    - |
      # Validate all YAML files in parallel
      for file in config/settings/*.yaml; do
        python -c "import yaml; yaml.safe_load(open('$file'))" &
      done
      wait
    - echo "✅ All YAML configuration files are valid"
  rules:
    - changes:
        - "config/**/*.yaml"
        - "config/**/*.yml"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

validate-requirements:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  timeout: 10m
  before_script:
    - pip install --no-cache-dir pip-tools pip-audit
  script:
    - echo "Validating requirements.txt format..."
    - python -m pip install --dry-run -r requirements.txt
    - echo "✅ Requirements are valid and installable"
    - echo "Checking requirements for known vulnerabilities..."
    - timeout 300 pip-audit --requirement requirements.txt --format json --output audit-report.json || echo "Audit completed with warnings"
    - echo "✅ Requirements security check completed"
  artifacts:
    reports:
      sast: audit-report.json
    paths:
      - audit-report.json
    expire_in: 1 day
  rules:
    - changes:
        - "requirements.txt"
        - "requirements.in"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

validate-pyproject:
  stage: validate
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  timeout: 10m
  before_script:
    - pip install --no-cache-dir tomli validate-pyproject build
  script:
    - echo "Validating pyproject.toml..."
    - python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"
    - validate-pyproject pyproject.toml
    - echo "Testing package build configuration..."
    - python -m build --sdist --wheel --outdir dist/ .
    - echo "✅ pyproject.toml validation completed"
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  rules:
    - changes:
        - "pyproject.toml"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# =============================================================================
# COMBINED TESTING STAGE - OPTIMIZED
# =============================================================================

code-quality:
  stage: test
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - docker
  timeout: 15m
  before_script:
    - pip install --no-cache-dir black flake8 pytest pytest-xdist
  script:
    - echo "Running code quality checks..."
    - black --check --diff . &
    - flake8 services/ plugins/ models/ --max-line-length=100 --extend-ignore=E203,W503 &
    - wait
    - echo "✅ Code quality checks passed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# =============================================================================
# SECURITY STAGE - OPTIMIZED
# =============================================================================

bandit-sast:
  stage: security
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - security
    - docker
  timeout: 15m
  before_script:
    - pip install --no-cache-dir bandit
  script:
    - echo "Running Bandit security scan..."
    - bandit -r app.py services/ plugins/ routes/ models/ config/ -f json -o bandit-report.json || true
    - echo "✅ Bandit security scan completed"
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

safety-check:
  stage: security
  image: python:${PYTHON_VERSION}-slim
  tags:
    - homelab
    - security
    - docker
  timeout: 10m
  before_script:
    - pip install --no-cache-dir safety
  script:
    - echo "Running Safety vulnerability check..."
    - safety --key ${SAFETY_API_KEY} scan --output json > safety-report.json
    - echo "✅ Safety vulnerability check completed"
  artifacts:
    paths:
      - safety-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# =============================================================================
# BUILD STAGE - HIGHLY OPTIMIZED
# =============================================================================

build-image:
  stage: build
  image: docker:24-cli
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_BUILDKIT: 1
  tags:
    - homelab
    - build
    - docker
  timeout: 45m
  before_script:
    - echo "Waiting for Docker daemon to start..."
    - until docker info >/dev/null 2>&1; do sleep 1; done
    - echo "Docker daemon started successfully"
    - echo "Authenticating with container registry..."
    - |
      if [ -z "${DOCKERHUB_USERNAME}" ] || [ -z "${DOCKERHUB_TOKEN}" ]; then
        echo "Error: DOCKERHUB_USERNAME and DOCKERHUB_TOKEN must be set"
        exit 1
      fi
    - echo "${DOCKERHUB_TOKEN}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin "${REGISTRY}"
  script:
    - echo "Building container image with Docker..."
    - |
      # Set proper version for setuptools_scm
      if [ -n "$CI_COMMIT_TAG" ]; then
        # Use tag as-is if it's a tagged release
        export SETUPTOOLS_SCM_PRETEND_VERSION="$CI_COMMIT_TAG"
        echo "Using tag version: $CI_COMMIT_TAG"
      else
        # Create a development version for non-tagged builds
        export SETUPTOOLS_SCM_PRETEND_VERSION="0.1.0.dev0+g$CI_COMMIT_SHORT_SHA"
        echo "Using dev version: 0.1.0.dev0+g$CI_COMMIT_SHORT_SHA"
      fi
      
      # Build with cache
      docker build \
        --tag "$IMAGE_NAME:$CI_COMMIT_SHA" \
        --tag "$IMAGE_NAME:latest" \
        --label "org.opencontainers.image.source=$CI_PROJECT_URL" \
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
        --label "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME" \
        --label "org.opencontainers.image.title=$APP_NAME" \
        --build-arg SETUPTOOLS_SCM_PRETEND_VERSION="$SETUPTOOLS_SCM_PRETEND_VERSION" \
        --cache-from "$IMAGE_NAME:latest" \
        --file Dockerfile \
        .
        
    - echo "Pushing images to registry..."
    - docker push "$IMAGE_NAME:$CI_COMMIT_SHA"
    - docker push "$IMAGE_NAME:latest"
    - echo "✅ Container build and push completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null

build-tagged-image:
  stage: build
  image: docker:24-cli
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    DOCKER_BUILDKIT: 1
  tags:
    - homelab
    - build
    - docker
  timeout: 45m
  before_script:
    - echo "Waiting for Docker daemon to start..."
    - until docker info >/dev/null 2>&1; do sleep 1; done
    - echo "Docker daemon started successfully"
    - echo "Authenticating with container registry..."
    - |
      if [ -z "${DOCKERHUB_USERNAME}" ] || [ -z "${DOCKERHUB_TOKEN}" ]; then
        echo "Error: DOCKERHUB_USERNAME and DOCKERHUB_TOKEN must be set"
        exit 1
      fi
    - echo "${DOCKERHUB_TOKEN}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin "${REGISTRY}"
  script:
    - echo "Building tagged container image..."
    - |
      # For tagged builds, use the tag as version
      export SETUPTOOLS_SCM_PRETEND_VERSION="$CI_COMMIT_TAG"
      echo "Using tag version: $CI_COMMIT_TAG"
      
      docker build \
        --tag "$IMAGE_NAME:$CI_COMMIT_TAG" \
        --label "org.opencontainers.image.source=$CI_PROJECT_URL" \
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA" \
        --label "org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        --label "org.opencontainers.image.version=$CI_COMMIT_TAG" \
        --label "org.opencontainers.image.title=$APP_NAME" \
        --build-arg SETUPTOOLS_SCM_PRETEND_VERSION="$CI_COMMIT_TAG" \
        --cache-from "$IMAGE_NAME:latest" \
        --file Dockerfile \
        .
    - docker push "$IMAGE_NAME:$CI_COMMIT_TAG"
    - echo "✅ Tagged container build completed"
  rules:
    - if: $CI_COMMIT_TAG

# =============================================================================
# DEPLOY STAGE - UNCHANGED
# =============================================================================

deploy-staging:
  stage: deploy
  image: alpine:latest
  tags:
    - homelab
    - deploy
  timeout: 10m
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment..."
    - echo "Image:$IMAGE_NAME:$CI_COMMIT_SHA"
    - echo "Staging deployment would happen here"
    - echo "✅ Staging deployment completed"
  environment:
    name: staging
    url: https://staging.trakbridge.homelab.local
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

deploy-production:
  stage: deploy
  image: alpine:latest
  tags:
    - homelab
    - deploy
  timeout: 10m
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production environment..."
    - echo "Image:$IMAGE_NAME:$CI_COMMIT_TAG"
    - echo "Production deployment would happen here"
    - echo "✅ Production deployment completed"
  environment:
    name: production
    url: https://trakbridge.homelab.local
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# =============================================================================
# NOTIFICATION STAGE - OPTIMIZED
# =============================================================================

notify-success:
  stage: .post
  image: alpine:latest
  tags:
    - homelab
  timeout: 2m
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Pipeline completed successfully!"
    - echo "Built and pushed:$IMAGE_NAME:$CI_COMMIT_SHA"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  when: on_success

notify-failure:
  stage: .post
  image: alpine:latest
  tags:
    - homelab
  timeout: 2m
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Pipeline failed!"
    - echo "Check the logs for details"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  when: on_failure