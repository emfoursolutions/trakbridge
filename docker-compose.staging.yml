# =============================================================================
# TrakBridge Staging Environment Docker Compose Configuration
# =============================================================================
#
# This configuration provides a production-like staging environment for:
# - User Acceptance Testing (UAT)
# - Integration testing with external systems
# - Performance validation
# - Security testing
# - Final validation before production releases
#
# Usage:
#   docker-compose -f docker-compose.staging.yml --profile postgres --profile nginx up -d
#
# Features:
#   - Production-like configuration with security hardening
#   - PostgreSQL database with persistence
#   - Nginx reverse proxy with SSL termination
#   - Monitoring and logging
#   - Performance profiling capabilities
#   - Automated backups
#
# =============================================================================

version: '3.8'

# =============================================================================
# CONFIGURATION SECTION - Staging Environment Settings
# =============================================================================
x-environment: &staging-environment
  # Application Settings
  APP_VERSION: "${APP_VERSION:-staging-latest}"
  FLASK_ENV: "production"
  FLASK_APP: "app.py"
  APP_PORT: "5000"
  USER_ID: ${UID:-1000}
  GROUP_ID: ${GID:-1000}
  
  # Configuration Management
  TRAKBRIDGE_CONFIG_DIR: "/app/external_config"
  TRAKBRIDGE_CONFIG_AUTO_INSTALL: "true"
  TRAKBRIDGE_CONFIG_UPDATE_MODE: "preserve"
  
  # Database Configuration
  DB_TYPE: "postgresql"
  DB_HOST: "postgres"
  DB_PORT: "5432"
  DB_NAME: "trakbridge_staging"
  DB_USER: "trakbridge_staging"
  
  # Application Performance (Production-like)
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  MAX_WORKER_THREADS: "6"
  DEFAULT_POLL_INTERVAL: "120"
  HTTP_TIMEOUT: "30"
  HTTP_MAX_CONNECTIONS: "150"
  HTTP_MAX_CONNECTIONS_PER_HOST: "15"
  
  # Security Settings
  TRAKBRIDGE_APPLICATION_URL: "${STAGING_URL:-https://staging.trakbridge.local}"
  SECURE_COOKIES: "true"
  
  # Monitoring & Observability
  ENABLE_METRICS: "true"
  ENABLE_TRACING: "true"
  ENABLE_PROFILING: "true"

# Database secrets for staging
x-secrets: &staging-secrets
  DB_PASSWORD_FILE: "/run/secrets/db_password"
  SECRET_KEY_FILE: "/run/secrets/secret_key"
  TB_MASTER_KEY_FILE: "/run/secrets/tb_master_key"

services:
  # =============================================================================
  # TrakBridge Application - Staging Configuration
  # =============================================================================
  trakbridge:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
    image: trakbridge:${APP_VERSION:-staging-latest}
    container_name: trakbridge-staging
    restart: unless-stopped
    
    environment:
      <<: *staging-environment
      <<: *staging-secrets
    
    secrets:
      - db_password
      - secret_key
      - tb_master_key
    
    ports:
      - "5000:5000"
    
    volumes:
      - ./logs/staging:/app/logs
      - ./data/staging:/app/data
      - ./config/staging:/app/external_config
      - ./plugins/staging:/app/external_plugins:ro
      - ./backups/staging:/app/backups
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    
    depends_on:
      postgres:
        condition: service_healthy
        required: true
      redis:
        condition: service_healthy
        required: false
    
    networks:
      - trakbridge-staging
    
    # Resource limits for staging environment
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # =============================================================================
  # PostgreSQL Database - Staging Configuration
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: trakbridge-postgres-staging
    restart: unless-stopped
    profiles: ["postgres", "db"]
    
    environment:
      POSTGRES_DB: trakbridge_staging
      POSTGRES_USER: trakbridge_staging
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      # Enable query logging for staging analysis
      POSTGRES_LOG_STATEMENT: "all"
      POSTGRES_LOG_MIN_DURATION_STATEMENT: "1000"
    
    secrets:
      - db_password
    
    ports:
      - "5432:5432"
    
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./docker/init-scripts/postgres:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres-staging:/var/log/postgresql
      - ./backups/postgres-staging:/backups
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trakbridge_staging -d trakbridge_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - trakbridge-staging
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c pg_stat_statements.max=1000
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB

  # =============================================================================
  # Redis Cache - Optional for Staging
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: trakbridge-redis-staging
    restart: unless-stopped
    profiles: ["redis", "cache"]
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_staging_data:/data
      - ./config/redis/staging.conf:/usr/local/etc/redis/redis.conf:ro
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    networks:
      - trakbridge-staging
    
    command: redis-server /usr/local/etc/redis/redis.conf
    
    # Security settings
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Nginx Reverse Proxy - Staging Configuration
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: trakbridge-nginx-staging
    restart: unless-stopped
    profiles: ["nginx", "proxy"]
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./init/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/staging-ssl:/etc/nginx/ssl:ro
      - ./logs/nginx-staging:/var/log/nginx
      - ./static:/var/www/html/static:ro
    
    depends_on:
      trakbridge:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - trakbridge-staging
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:rw,noexec,nosuid,size=50m
      - /var/run:rw,noexec,nosuid,size=50m

  # =============================================================================
  # Monitoring & Observability - Staging
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trakbridge-prometheus-staging
    restart: unless-stopped
    profiles: ["monitoring", "observability"]
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./docker/prometheus/staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    
    networks:
      - trakbridge-staging

  grafana:
    image: grafana/grafana:latest
    container_name: trakbridge-grafana-staging
    restart: unless-stopped
    profiles: ["monitoring", "observability"]
    
    ports:
      - "3000:3000"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD:-staging-admin-password}"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./docker/grafana/staging-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/staging-datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - trakbridge-staging

  # =============================================================================
  # Backup Service - Staging
  # =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: trakbridge-backup-staging
    restart: "no"
    profiles: ["backup"]
    
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: trakbridge_staging
      PGUSER: trakbridge_staging
      PGPASSWORD_FILE: /run/secrets/db_password
    
    secrets:
      - db_password
    
    volumes:
      - ./backups/staging:/backups
      - ./scripts:/scripts:ro
    
    networks:
      - trakbridge-staging
    
    command: >
      sh -c "
        echo 'Starting backup service...'
        while true; do
          echo 'Creating database backup...'
          pg_dump -h postgres -U trakbridge_staging trakbridge_staging > /backups/trakbridge_staging_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup completed'
          # Clean up old backups (keep last 7 days)
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400  # Run daily
        done
      "

# =============================================================================
# Networks & Volumes
# =============================================================================
networks:
  trakbridge-staging:
    driver: bridge
    name: trakbridge-staging-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_staging_data:
    driver: local
    name: trakbridge-postgres-staging-data
  
  redis_staging_data:
    driver: local
    name: trakbridge-redis-staging-data
  
  prometheus_staging_data:
    driver: local
    name: trakbridge-prometheus-staging-data
  
  grafana_staging_data:
    driver: local
    name: trakbridge-grafana-staging-data

# =============================================================================
# Secrets - Staging Environment
# =============================================================================
secrets:
  db_password:
    file: ${DB_PASSWORD_FILE:-./secrets/staging/db_password}
  
  secret_key:
    file: ${SECRET_KEY_FILE:-./secrets/staging/secret_key}
  
  tb_master_key:
    file: ${TB_MASTER_KEY_FILE:-./secrets/staging/tb_master_key}