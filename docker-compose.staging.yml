# =============================================================================
# TrakBridge Staging Environment Docker Compose Configuration
# =============================================================================
#
# This configuration provides a production-like staging environment for:
# - User Acceptance Testing (UAT)
# - Integration testing with external systems
# - Performance validation
# - Security testing
# - Final validation before production releases
#
# Usage:
#   docker-compose -f docker-compose.staging.yml --profile postgres --profile nginx up -d
#
# Features:
#   - Production-like configuration with security hardening
#   - PostgreSQL database with persistence
#   - Nginx reverse proxy with SSL termination
#   - Monitoring and logging
#   - Performance profiling capabilities
#   - Automated backups
#
# =============================================================================

version: '3.8'

# =============================================================================
# CONFIGURATION SECTION - Staging Environment Settings
# =============================================================================
x-environment: &staging-environment
  # Application Settings
  APP_VERSION: "staging-latest"  # Update tag as needed for staging releases
  FLASK_ENV: "production"
  FLASK_APP: "app.py"
  APP_PORT: "5000"
  USER_ID: "${DOCKER_USER_ID:-1000}"  # Dynamic user ID for GitLab CI compatibility
  GROUP_ID: "${DOCKER_GROUP_ID:-1000}"  # Dynamic group ID for GitLab CI compatibility
  
  # Configuration Management
  TRAKBRIDGE_CONFIG_DIR: "/app/external_config"
  TRAKBRIDGE_CONFIG_AUTO_INSTALL: "true"
  TRAKBRIDGE_CONFIG_UPDATE_MODE: "preserve"
  
  # Database Configuration (dynamic for multi-database testing)
  DB_TYPE: "${DB_TYPE:-postgresql}"
  DB_HOST: "${DB_HOST:-postgres}"
  DB_PORT: "${DB_PORT:-5432}"
  DB_NAME: "${DB_NAME:-trakbridge}"
  DB_USER: "${DB_USER:-trakbridge}"
  
  # Application Performance (Production-like)
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  MAX_WORKER_THREADS: "6"
  DEFAULT_POLL_INTERVAL: "120"
  HTTP_TIMEOUT: "30"
  HTTP_MAX_CONNECTIONS: "150"
  HTTP_MAX_CONNECTIONS_PER_HOST: "15"
  
  # Security Settings
  TRAKBRIDGE_APPLICATION_URL: "https://staging.trakbridge.local"  # Update for your staging domain
  SECURE_COOKIES: "true"
  
  # Monitoring & Observability
  ENABLE_METRICS: "true"
  ENABLE_TRACING: "true"
  ENABLE_PROFILING: "true"
  
  # Authentication Configuration (Staging - Safe testing configuration)
  # LDAP Settings (environment variables for safe testing)
  LDAP_ENABLED: "${LDAP_ENABLED:-false}"
  LDAP_SERVER: "${LDAP_SERVER:-ldap://your-ad-server.company.com}"
  LDAP_PORT: "${LDAP_PORT:-389}"
  LDAP_USE_SSL: "${LDAP_USE_SSL:-false}"
  LDAP_USE_TLS: "${LDAP_USE_TLS:-false}"
  LDAP_VALIDATE_CERT: "${LDAP_VALIDATE_CERT:-false}"
  LDAP_BIND_DN: "${LDAP_BIND_DN:-CN=trakbridge,OU=Service Accounts,DC=company,DC=com}"
  LDAP_BIND_PASSWORD: "${LDAP_BIND_PASSWORD:-default-ldap-password}"
  LDAP_USER_SEARCH_BASE: "${LDAP_USER_SEARCH_BASE:-OU=Users,DC=company,DC=com}"
  LDAP_USER_SEARCH_FILTER: "${LDAP_USER_SEARCH_FILTER:-(sAMAccountName={username})}"
  LDAP_GROUP_SEARCH_BASE: "${LDAP_GROUP_SEARCH_BASE:-OU=Groups,DC=company,DC=com}"
  LDAP_GROUP_SEARCH_FILTER: "${LDAP_GROUP_SEARCH_FILTER:-(member={user_dn})}"
  LDAP_ADMIN_GROUP: "${LDAP_ADMIN_GROUP:-CN=TrakBridge-Admins,OU=Groups,DC=company,DC=com}"
  LDAP_OPERATOR_GROUP: "${LDAP_OPERATOR_GROUP:-CN=TrakBridge-Operators,OU=Groups,DC=company,DC=com}"
  LDAP_USER_GROUP: "${LDAP_USER_GROUP:-CN=TrakBridge-Users,OU=Groups,DC=company,DC=com}"
  LDAP_DEFAULT_ROLE: "${LDAP_DEFAULT_ROLE:-user}"
  LDAP_CONNECTION_TIMEOUT: "${LDAP_CONNECTION_TIMEOUT:-10}"
  LDAP_RESPONSE_TIMEOUT: "${LDAP_RESPONSE_TIMEOUT:-30}"
  
  # OIDC/SSO Settings (environment variables for safe testing)
  OIDC_ENABLED: "${OIDC_ENABLED:-false}"
  OIDC_ISSUER: "${OIDC_ISSUER:-https://your-identity-provider.com}"
  OIDC_CLIENT_ID: "${OIDC_CLIENT_ID:-trakbridge-client}"
  OIDC_CLIENT_SECRET: "${OIDC_CLIENT_SECRET:-default-oidc-secret}"
  OIDC_REDIRECT_URI: "${OIDC_REDIRECT_URI:-http://localhost:5000/auth/oidc/callback}"
  OIDC_VERIFY_SIGNATURE: "${OIDC_VERIFY_SIGNATURE:-false}"
  OIDC_VERIFY_AUDIENCE: "${OIDC_VERIFY_AUDIENCE:-false}"
  OIDC_VERIFY_ISSUER: "${OIDC_VERIFY_ISSUER:-false}"
  OIDC_ADMIN_GROUP: "${OIDC_ADMIN_GROUP:-trakbridge-admins}"
  OIDC_OPERATOR_GROUP: "${OIDC_OPERATOR_GROUP:-trakbridge-operators}"
  OIDC_USER_GROUP: "${OIDC_USER_GROUP:-trakbridge-users}"
  OIDC_DEFAULT_ROLE: "${OIDC_DEFAULT_ROLE:-user}"
  
  # Local Authentication (Staging - Production-like security)
  LOCAL_AUTH_ENABLED: "true"
  PASSWORD_MIN_LENGTH: "10"  # Production-like security
  PASSWORD_REQUIRE_UPPERCASE: "true"
  PASSWORD_REQUIRE_LOWERCASE: "true"
  PASSWORD_REQUIRE_NUMBERS: "true"
  PASSWORD_REQUIRE_SPECIAL: "true"
  PASSWORD_MAX_AGE_DAYS: "90"
  
  # Session Configuration (Staging)
  SESSION_LIFETIME_HOURS: "8"
  SESSION_CLEANUP_INTERVAL: "60"
  SESSION_SECURE_COOKIES: "true"  # Production-like security
  SESSION_COOKIE_DOMAIN: "staging.trakbridge.local"  # Update for your staging domain
  SESSION_COOKIE_PATH: "/"
  
  # Secret file paths (if secrets are in /app/secrets instead of /run/secrets)
  DB_PASSWORD_FILE: "/app/secrets/db_password"
  SECRET_KEY_FILE: "/app/secrets/secret_key"
  TB_MASTER_KEY_FILE: "/app/secrets/tb_master_key"
  LDAP_BIND_PASSWORD_FILE: "/app/secrets/ldap_bind_password"
  OIDC_CLIENT_SECRET_FILE: "/app/secrets/oidc_client_secret"

# Secrets are now configured directly in environment variables above

services:
  # =============================================================================
  # TrakBridge Application - Staging Configuration
  # =============================================================================
  trakbridge:
    image: "${CI_REGISTRY_IMAGE:-trakbridge}:${CI_COMMIT_TAG:-latest}"
    container_name: trakbridge-staging
    restart: unless-stopped
    
    environment:
      <<: *staging-environment
    
    secrets:
      - db_password
      - secret_key
      - tb_master_key
      - ldap_bind_password
      - oidc_client_secret
    
    ports:
      - "${APP_PORT:-5000}:5000"
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/external_config
      - ./plugins:/app/external_plugins
      - ./backups:/app/backups
      - ./secrets:/app/secrets
    
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'Health check starting...' && curl -v -f --connect-timeout 5 --max-time 8 http://localhost:5000/api/health 2>&1 && echo 'Health check passed'"]
      interval: 30s
      timeout: 12s
      retries: 3
      start_period: 60s
    
    depends_on:
      postgres:
        condition: service_healthy
        required: false
      mysql:
        condition: service_healthy
        required: false
      redis:
        condition: service_healthy
        required: false
    
    networks:
      - trakbridge-staging
    
    # Resource limits for staging environment
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # =============================================================================
  # PostgreSQL Database - Staging Configuration
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: trakbridge-postgres-staging
    restart: unless-stopped
    profiles: ["postgres", "db"]
    
    environment:
      POSTGRES_DB: trakbridge
      POSTGRES_USER: trakbridge
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      # Enable query logging for staging analysis
      POSTGRES_LOG_STATEMENT: "all"
      POSTGRES_LOG_MIN_DURATION_STATEMENT: "1000"
    
    secrets:
      - db_password
    
    ports:
      - "5432:5432"
    
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./docker/init-scripts/postgres:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres-staging:/var/log/postgresql
      - ./backups/postgres-staging:/backups
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trakbridge -d trakbridge"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - trakbridge-staging
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c pg_stat_statements.max=1000
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB

  # =============================================================================
  # MySQL Database - Staging Configuration
  # =============================================================================
  mysql:
    image: mysql:8.0
    container_name: trakbridge-mysql-staging
    restart: unless-stopped
    profiles: ["mysql", "db"]
    
    environment:
      MYSQL_DATABASE: trakbridge
      MYSQL_USER: trakbridge
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_password
    
    secrets:
      - db_password
    
    ports:
      - "3306:3306"
    
    volumes:
      - mysql_staging_data:/var/lib/mysql
      - ./docker/init-scripts/mysql:/docker-entrypoint-initdb.d:ro
      - ./logs/mysql-staging:/var/log/mysql
      - ./backups/mysql-staging:/backups
    
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    networks:
      - trakbridge-staging
    
    # Security configuration
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Redis Cache - Optional for Staging
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: trakbridge-redis-staging
    restart: unless-stopped
    profiles: ["redis", "cache"]
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis_staging_data:/data
      - ./config/redis/staging.conf:/usr/local/etc/redis/redis.conf:ro
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    networks:
      - trakbridge-staging
    
    command: redis-server /usr/local/etc/redis/redis.conf
    
    # Security settings
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Nginx Reverse Proxy - Staging Configuration
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: trakbridge-nginx-staging
    restart: unless-stopped
    profiles: ["nginx", "proxy"]
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./init/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/staging-ssl:/etc/nginx/ssl:ro
      - ./logs/nginx-staging:/var/log/nginx
      - ./static:/var/www/html/static:ro
    
    depends_on:
      trakbridge:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - trakbridge-staging
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx:rw,noexec,nosuid,size=50m
      - /var/run:rw,noexec,nosuid,size=50m

  # =============================================================================
  # Monitoring & Observability - Staging
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: trakbridge-prometheus-staging
    restart: unless-stopped
    profiles: ["monitoring", "observability"]
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./docker/prometheus/staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    
    networks:
      - trakbridge-staging

  grafana:
    image: grafana/grafana:latest
    container_name: trakbridge-grafana-staging
    restart: unless-stopped
    profiles: ["monitoring", "observability"]
    
    ports:
      - "3000:3000"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD:-staging-admin-password}"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
    
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./docker/grafana/staging-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/staging-datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - trakbridge-staging

  # =============================================================================
  # Backup Service - Staging
  # =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: trakbridge-backup-staging
    restart: "no"
    profiles: ["backup"]
    
    environment:
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: trakbridge_staging
      PGUSER: trakbridge_staging
      PGPASSWORD_FILE: /run/secrets/db_password
    
    secrets:
      - db_password
    
    volumes:
      - ./backups/staging:/backups
      - ./scripts:/scripts:ro
    
    networks:
      - trakbridge-staging
    
    command: >
      sh -c "
        echo 'Starting backup service...'
        while true; do
          echo 'Creating database backup...'
          pg_dump -h postgres -U trakbridge_staging trakbridge_staging > /backups/trakbridge_staging_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup completed'
          # Clean up old backups (keep last 7 days)
          find /backups -name '*.sql' -mtime +7 -delete
          sleep 86400  # Run daily
        done
      "

# =============================================================================
# Networks & Volumes
# =============================================================================
networks:
  trakbridge-staging:
    driver: bridge
    name: trakbridge-staging-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_staging_data:
    driver: local
    name: trakbridge-postgres-staging-data
  
  mysql_staging_data:
    driver: local
    name: trakbridge-mysql-staging-data
  
  redis_staging_data:
    driver: local
    name: trakbridge-redis-staging-data
  
  prometheus_staging_data:
    driver: local
    name: trakbridge-prometheus-staging-data
  
  grafana_staging_data:
    driver: local
    name: trakbridge-grafana-staging-data

# =============================================================================
# Secrets - Staging Environment (using standard secrets directory)
# =============================================================================
secrets:
  db_password:
    file: ${DB_PASSWORD_FILE:-./secrets/db_password}
  
  secret_key:
    file: ${SECRET_KEY_FILE:-./secrets/secret_key}
  
  tb_master_key:
    file: ${TB_MASTER_KEY_FILE:-./secrets/tb_master_key}
  
  ldap_bind_password:
    file: ${LDAP_BIND_PASSWORD_FILE:-./secrets/ldap_bind_password}
  
  oidc_client_secret:
    file: ${OIDC_CLIENT_SECRET_FILE:-./secrets/oidc_client_secret}