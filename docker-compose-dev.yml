# =============================================================================
# TrakBridge Development Environment Docker Compose Configuration
# =============================================================================
#
# This configuration provides a development environment optimized for:
# - Rapid development and testing
# - Live code reloading and debugging
# - Easy database access and inspection
# - Development tooling integration
# - Fast iteration cycles
#
# Usage:
#   docker-compose -f docker-compose-dev.yml --profile postgres up -d
#   docker-compose -f docker-compose-dev.yml --profile postgres --profile nginx up -d
#
# Features:
#   - Development-optimized settings (debug mode, verbose logging)
#   - File watching and live reload
#   - Direct database access for debugging
#   - Development tools and utilities
#   - Test data seeding
#
# =============================================================================

services:
  # Main application service
  app:
    image: "trakbridge:latest"  # Change tag as needed for development
    container_name: "trakbridge-dev"
    restart: unless-stopped

    # Development environment configuration
    environment:
      # Flask environment - Development mode
      FLASK_ENV: "development"
      FLASK_APP: "app.py"
      
      # Dynamic user creation for runtime
      USER_ID: "1000"  # Change if needed for development environment
      GROUP_ID: "1000"  # Change if needed for development environment
      
      # Configuration Management
      TRAKBRIDGE_CONFIG_DIR: "/app/external_config"
      TRAKBRIDGE_CONFIG_AUTO_INSTALL: "true"
      TRAKBRIDGE_CONFIG_UPDATE_MODE: "preserve"

      # Database configuration
      DB_TYPE: "postgresql"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_NAME: "trakbridge_dev"
      DB_USER: "trakbridge_dev"

      # Development settings
      DEBUG: "true"
      LOG_LEVEL: "INFO"
      LOG_DIR: "logs"
      
      # Application URL for development
      TRAKBRIDGE_APPLICATION_URL: "http://localhost:5000"

      # Performance settings (development values)
      MAX_WORKER_THREADS: "8"
      MAX_CONCURRENT_STREAMS: "200"
      DEFAULT_POLL_INTERVAL: "120"
      HTTP_TIMEOUT: "30"
      HTTP_MAX_CONNECTIONS: "100"
      HTTP_MAX_CONNECTIONS_PER_HOST: "10"
      ASYNC_TIMEOUT: "60"

      # Feature flags (development - can enable for debugging)
      ENABLE_SQL_ECHO: "false"  # Set to "true" for SQL debugging
      SQLALCHEMY_RECORD_QUERIES: "false"  # Set to "true" for query profiling
      
      # Authentication Configuration (Development)
      # LDAP Settings (disabled by default for development)
      LDAP_ENABLED: "false"  # Set to "true" and configure for LDAP testing
      LDAP_SERVER: "ldap://dev-ad-server.company.com"  # Update for dev LDAP server
      LDAP_PORT: "389"
      LDAP_USE_SSL: "false"
      LDAP_USE_TLS: "false"  # Relaxed for development
      LDAP_VALIDATE_CERT: "false"  # Relaxed for development
      LDAP_BIND_DN: "CN=trakbridge-dev,OU=Service Accounts,DC=dev,DC=company,DC=com"
      LDAP_BIND_PASSWORD: "dev-ldap-password"  # Use non-sensitive dev password
      LDAP_USER_SEARCH_BASE: "OU=Users,DC=dev,DC=company,DC=com"
      LDAP_USER_SEARCH_FILTER: "(sAMAccountName={username})"
      LDAP_GROUP_SEARCH_BASE: "OU=Groups,DC=dev,DC=company,DC=com"
      LDAP_GROUP_SEARCH_FILTER: "(member={user_dn})"
      LDAP_ADMIN_GROUP: "CN=TrakBridge-Dev-Admins,OU=Groups,DC=dev,DC=company,DC=com"
      LDAP_OPERATOR_GROUP: "CN=TrakBridge-Dev-Operators,OU=Groups,DC=dev,DC=company,DC=com"
      LDAP_USER_GROUP: "CN=TrakBridge-Dev-Users,OU=Groups,DC=dev,DC=company,DC=com"
      LDAP_DEFAULT_ROLE: "user"
      LDAP_CONNECTION_TIMEOUT: "10"
      LDAP_RESPONSE_TIMEOUT: "30"
      
      # OIDC/SSO Settings (disabled by default for development)
      OIDC_ENABLED: "false"  # Set to "true" and configure for OIDC testing
      OIDC_ISSUER: "https://dev-identity-provider.com"  # Update for dev provider
      OIDC_CLIENT_ID: "trakbridge-dev-client"  # Development client ID
      OIDC_CLIENT_SECRET: "dev-oidc-client-secret"  # Use non-sensitive dev secret
      OIDC_REDIRECT_URI: "http://localhost:5000/auth/oidc/callback"  # Dev callback URL
      OIDC_VERIFY_SIGNATURE: "false"  # Relaxed for development
      OIDC_VERIFY_AUDIENCE: "false"  # Relaxed for development
      OIDC_VERIFY_ISSUER: "false"  # Relaxed for development
      OIDC_ADMIN_GROUP: "trakbridge-dev-admins"
      OIDC_OPERATOR_GROUP: "trakbridge-dev-operators"
      OIDC_USER_GROUP: "trakbridge-dev-users"
      OIDC_DEFAULT_ROLE: "user"
      
      # Local Authentication (Development - Relaxed for easier testing)
      LOCAL_AUTH_ENABLED: "true"
      PASSWORD_MIN_LENGTH: "4"  # Relaxed for development
      PASSWORD_REQUIRE_UPPERCASE: "false"  # Relaxed for development
      PASSWORD_REQUIRE_LOWERCASE: "false"  # Relaxed for development
      PASSWORD_REQUIRE_NUMBERS: "false"  # Relaxed for development
      PASSWORD_REQUIRE_SPECIAL: "false"  # Relaxed for development
      PASSWORD_MAX_AGE_DAYS: ""  # No expiry in development
      
      # Session Configuration (Development)
      SESSION_LIFETIME_HOURS: "8"
      SESSION_CLEANUP_INTERVAL: "5"  # More frequent cleanup for development
      SESSION_SECURE_COOKIES: "false"  # Relaxed for HTTP development
      SESSION_COOKIE_DOMAIN: ""  # Auto-detection
      SESSION_COOKIE_PATH: "/"

    # Secrets (for production)
    secrets:
      - db_password
      - secret_key
      - tb_master_key
      - ldap_bind_password
      - oidc_client_secret

    # Ports
    ports:
      - "${APP_PORT:-5000}:5000"

    # Volumes
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./plugins:/app/plugins
      - ${CONFIG_DIR:-./config}:/app/config:ro

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

    # Dependencies - wait for database to be healthy
    depends_on:
      postgres:
        condition: service_healthy
        required: false
      mysql:
        condition: service_healthy
        required: false

    # Resource limits (optional)
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-512M}

    # Networks
    networks:
      - app-network

  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-trakbridge}-postgres
    restart: unless-stopped
    profiles:
      - postgres
      - db

    environment:
      POSTGRES_DB: "trakbridge_dev"
      POSTGRES_USER: "trakbridge_dev"
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password

    secrets:
      - db_password

    ports:
      - "${POSTGRES_PORT:-5432}:5432"

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts/postgres:/docker-entrypoint-initdb.d:ro

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-trakbridge_db}" ]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - app-network

  # MySQL database (optional)
  mysql:
    image: mysql:8.0
    container_name: ${COMPOSE_PROJECT_NAME:-trakbridge}-mysql
    restart: unless-stopped
    profiles:
      - mysql
      - db

    environment:
      MYSQL_DATABASE: ${DB_NAME:-trakbridge_db}
      MYSQL_USER: ${DB_USER:-mysql}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_password

    secrets:
      - db_password

    ports:
      - "${MYSQL_PORT:-3306}:3306"

    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/init-scripts/mysql:/docker-entrypoint-initdb.d:ro

    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - app-network

  # Redis (optional, for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-trakbridge}-redis
    restart: unless-stopped
    profiles:
      - redis
      - cache

    ports:
      - "${REDIS_PORT:-6379}:6379"

    volumes:
      - redis_data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - app-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-trakbridge}-nginx
    restart: unless-stopped
    profiles:
      - nginx
      - proxy

    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"

    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx

    depends_on:
      - app

    networks:
      - app-network

# Networks
networks:
  app-network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-trakbridge}-network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-trakbridge}-postgres-data

  mysql_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-trakbridge}-mysql-data

  redis_data:
    driver: local
    name: ${COMPOSE_PROJECT_NAME:-trakbridge}-redis-data

# Secrets
secrets:
  db_password:
    file: ${DB_PASSWORD_FILE:-./secrets/db_password}

  secret_key:
    file: ${SECRET_KEY_FILE:-./secrets/secret_key}

  tb_master_key:
    file: ${TB_MASTER_KEY_FILE:-./secrets/tb_master_key}

  ldap_bind_password:
    file: ${LDAP_BIND_PASSWORD_FILE:-./secrets/ldap_bind_password}

  oidc_client_secret:
    file: ${OIDC_CLIENT_SECRET_FILE:-./secrets/oidc_client_secret}